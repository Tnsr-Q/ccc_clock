name: Self-Hosted CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      use_self_hosted:
        description: 'Use self-hosted runners'
        required: false
        default: 'true'
        type: boolean

jobs:
  test-self-hosted:
    # Use self-hosted runners when explicitly triggered or via workflow_dispatch
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && inputs.use_self_hosted) || contains(github.event.head_commit.message, '[self-hosted]') && 'self-hosted' || 'ubuntu-latest' }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        # Install FFmpeg if not already available
        if ! command -v ffmpeg &> /dev/null; then
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update && sudo apt-get install -y ffmpeg
          elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install ffmpeg
          fi
        fi
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r ccc_clock/requirements.txt
        pip install pytest-cov flake8 black isort mypy
    
    - name: Lint with flake8
      run: |
        cd ccc_clock
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        cd ccc_clock
        black --check src tests
    
    - name: Check import sorting with isort
      run: |
        cd ccc_clock
        isort --check-only src tests
    
    - name: Type check with mypy
      run: |
        cd ccc_clock
        mypy src --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd ccc_clock
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./ccc_clock/coverage.xml
        flags: unittests
        name: codecov-umbrella-self-hosted

  docs-self-hosted:
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && inputs.use_self_hosted) || contains(github.event.head_commit.message, '[self-hosted]') && 'self-hosted' || 'ubuntu-latest' }}
    needs: test-self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r ccc_clock/requirements.txt
        pip install sphinx sphinx-rtd-theme myst-parser
    
    - name: Build documentation
      run: |
        cd ccc_clock/docs
        make html
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./ccc_clock/docs/_build/html

  animation-self-hosted:
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && inputs.use_self_hosted) || contains(github.event.head_commit.message, '[self-hosted]') && 'self-hosted' || 'ubuntu-latest' }}
    needs: test-self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install system dependencies
      run: |
        # Install FFmpeg if not already available
        if ! command -v ffmpeg &> /dev/null; then
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update && sudo apt-get install -y ffmpeg
          elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install ffmpeg
          fi
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r ccc_clock/requirements.txt
        pip install matplotlib ffmpeg-python
    
    - name: Generate animation
      run: |
        cd ccc_clock
        python animate_theta_abba.py
    
    - name: Upload animation artifact
      uses: actions/upload-artifact@v3
      with:
        name: theta-abba-animation-self-hosted
        path: ccc_clock/figures/theta_abba_animation.mp4